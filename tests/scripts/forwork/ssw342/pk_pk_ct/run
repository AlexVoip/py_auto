#!/bin/bash

. tests/scripts/ssw342/conf_pk_pk_ct

# Путь к скриптам
ROOT_DIR=$(pwd)
SRC_PATH=$ROOT_DIR/tests/scripts/ssw342/pk_pk_ct
create_dir $SRC_PATH/temp
TEMP_PATH=$SRC_PATH/temp
create_file $TEMP_PATH/ex_code.txt
create_dir $TEMP_PATH/ss_pk_pk_ct
create_dir log/ssw342_pk_pk_ct
LOG_PATH=log/ssw342_pk_pk_ct

create_file $LOG_PATH/log.txt

# Путь к sipp
#SIPP_PATH=../../../opt/sipp

# Переменные для подсчета успешных, неуспешных вызовов и номер теста
FAIL_COUNT=0
SUCC_COUNT=0
COUNT=0

cp /dev/null $LOG_PATH/log.txt

#				Заполнение переменных

echo "filling variables" >> $LOG_PATH/log.txt
echo "filling variables"

SSW_IP_PORT=$EXTER_IP
SIPP_IP=$IP

SSH_dom=$DEV_DOMAIN
SSH_user=$DEV_USER
SSH_pass=$DEV_PASS
SSH_host=$EXTER_IP

FINISH ()
{
T_NAME=Unregistration
$SIPP_PATH/sipp $SSW_IP_PORT -sf $SRC_PATH/reg_auth0.xml -inf $TEMP_PATH/ss_pk_pk_ct/$USER_A.csv -mi $SIPP_IP -s $USER_A -ap $USER_A -rtp_echo -l 1 -r 1 -m 1 -nd -i $SIPP_IP -p $PORT_A -timeout 10 -timeout_error
REZULT_A
$SIPP_PATH/sipp $SSW_IP_PORT -sf $SRC_PATH/reg_auth0.xml -inf $TEMP_PATH/ss_pk_pk_ct/$USER_D.csv -mi $SIPP_IP -s $USER_D -ap $USER_D -rtp_echo -l 1 -r 1 -m 1 -nd -i $SIPP_IP -p $PORT_D -timeout 10 -timeout_error
REZULT_A
$SIPP_PATH/sipp $SSW_IP_PORT -sf $SRC_PATH/reg_auth0.xml -inf $TEMP_PATH/ss_pk_pk_ct/$USER_B.csv -mi $SIPP_IP -s $USER_B -ap $USER_B -rtp_echo -l 1 -r 1 -m 1 -nd -i $SIPP_IP -p $PORT_B -timeout 10 -timeout_error
REZULT_A
$SIPP_PATH/sipp $SSW_IP_PORT -sf $SRC_PATH/reg_auth0.xml -inf $TEMP_PATH/ss_pk_pk_ct/"$USER_E"_pk.csv -mi $SIPP_IP -s $USER_E -ap $USER_E -rtp_echo -l 1 -r 1 -m 1 -nd -i $SIPP_IP -p $PORT_E -timeout 10 -timeout_error
REZULT_A
$SIPP_PATH/sipp $SSW_IP_PORT -sf $SRC_PATH/reg_auth0.xml -inf $TEMP_PATH/ss_pk_pk_ct/"$USER_C"_ch.csv -mi $SIPP_IP -s $USER_C -ap $USER_C -rtp_echo -l 1 -r 1 -m 1 -nd -i $SIPP_IP -p $PORT_C -timeout 10 -timeout_error
REZULT_A
#				Деактивация pickup групп на ssw

echo "pickup grous deactivate" >> $LOG_PATH/log.txt
T_NAME="pickup_grous_deactivate"
$SRC_PATH/sswconf_pk_gr_off.sh $SSH_host $SSH_user $SSH_pass $SSH_dom $SSH_dom $SSH_dom $SSH_dom $USER_B $USER_C $USER_D $USER_E

#				Удаление инжекционных файлов

rm $TEMP_PATH/ss_pk_pk_ct/"$USER_E"_pk.csv
rm $TEMP_PATH/ss_pk_pk_ct/$USER_D.csv
rm $TEMP_PATH/ss_pk_pk_ct/"$USER_C"_ch.csv
rm $TEMP_PATH/ss_pk_pk_ct/"$USER_C"_ct.csv
rm $TEMP_PATH/ss_pk_pk_ct/"$USER_C"_pk.csv
rm $TEMP_PATH/ss_pk_pk_ct/$USER_B.csv
rm $TEMP_PATH/ss_pk_pk_ct/$USER_A.csv

rm $SRC_PATH/002_uac_ssw_pk_ctr2.xml

echo "injection files removed" >> $LOG_PATH/log.txt

#    Читаем exit коды, чтобы убедиться, что все UAS отработали корректно.
EX_FAIL=0
while read line;do
     excode=`echo $line | cut -d ' ' -f 3`
     name=`echo $line | cut -d ' ' -f 1`
     echo "[DEBUG] Exit code from test $name equal $excode" >> $LOG_PATH/log.txt
     if [ "$excode" != "0" ];then
        EX_FAIL=1
        FAIL_COUNT=$(($FAIL_COUNT+1))
     fi
done < $TEMP_PATH/ex_code.txt

sudo rm $TEMP_PATH/ex_code.txt

# Вывод результата  
echo "Success $SUCC_COUNT, Failed $FAIL_COUNT"  

  if [[ $EX_FAIL -eq 0 && $FAIL_COUNT -eq 0 ]]
        then 
        exit 0
        else 
        exit 1
  fi
}

# Function finishing script
FATAL ()
{
sudo killall -9 screen
screen -wipe
sudo killall -9 sipp
FAIL_COUNT=$(($FAIL_COUNT+999))
}

# Функция подсчета успешных и неуспешных вызовов
REZULT_A ()
{
if test $? -eq 0
      then
        SUCC_COUNT=$(($SUCC_COUNT+1))
        echo "[DEBUG] Test $COUNT $T_NAME side A passed" >> $LOG_PATH/log.txt
      else
        FAIL_COUNT=$(($FAIL_COUNT+1))
        echo "[DEBUG] Test $COUNT $T_NAME side A failed" >> $LOG_PATH/log.txt
fi
}

FUNC_TEST_PK ()
{
        start_screen "$COUNT$T_NAME" "$COMMAND"
        sleep 0.5
        check_screen "open" "$COUNT$T_NAME"
        if test $? -ne 0; then
                echo "Fatal error - screen failed" >> $LOG_PATH/log.txt
                FATAL
                FINISH
        else   
        	start_screen "2$COUNT$T_NAME" "$COMMAND2"  
	        sleep 0.5
        	check_screen "open" "2$COUNT$T_NAME"
        	if test $? -ne 0; then
                	echo "Fatal error - screen failed" >> $LOG_PATH/log.txt
                	FATAL
                	FINISH
        	else   
        start_screen "3$COUNT$T_NAME" "$COMMAND3"
        sleep 0.5
        check_screen "open" "3$COUNT$T_NAME"
        if test $? -ne 0; then
                echo "Fatal error - screen failed" >> $LOG_PATH/log.txt
                FATAL
                FINISH
        else   
                start_screen "4$COUNT$T_NAME" "$COMMAND4"  
                sleep 0.5
                check_screen "open" "4$COUNT$T_NAME"
                if test $? -ne 0; then
                        echo "Fatal error - screen failed" >> $LOG_PATH/log.txt
                        FATAL
                        FINISH
                else
                   	$COMMAND_A
                	REZULT_A
                	wait_uas "$COUNT$T_NAME" 100
                        if test $? -eq 99;then 
                                echo "Fatal error - screen timeout" >> $LOG_PATH/log.txt
                                FATAL
                                FINISH
                        fi
			wait_uas "2$COUNT$T_NAME" 100
                	if test $? -eq 99;then 
                        	echo "Fatal error - screen timeout" >> $LOG_PATH/log.txt
                        	FATAL
                        	FINISH
                	fi
                        wait_uas "3$COUNT$T_NAME" 100
                        if test $? -eq 99;then 
                                echo "Fatal error - screen timeout" >> $LOG_PATH/log.txt
                                FATAL
                                FINISH
                        fi
                        wait_uas "4$COUNT$T_NAME" 100
                        if test $? -eq 99;then 
                                echo "Fatal error - screen timeout" >> $LOG_PATH/log.txt
                                FATAL
                                FINISH
                        fi
                	sleep 2
		fi
	fi
		fi
        fi
}


#				Активация pickup групп на ssw

echo "pickup groups activate" >> $LOG_PATH/log.txt
T_NAME=pickup_groups_activate
$SRC_PATH/sswconf_pk_gr_on.sh $SSH_host $SSH_user $SSH_pass $SSH_dom $SSH_dom $SSH_dom $SSH_dom $USER_B $USER_C $USER_D $USER_E
REZULT_A

#				Формирование инжекционных файлов

echo "injection files creation" >> $LOG_PATH/log.txt
echo "injection files creation"

touch $TEMP_PATH/ss_pk_pk_ct/"$USER_E"_pk.csv
touch $TEMP_PATH/ss_pk_pk_ct/$USER_D.csv
touch $TEMP_PATH/ss_pk_pk_ct/"$USER_C"_ch.csv
touch $TEMP_PATH/ss_pk_pk_ct/"$USER_C"_ct.csv
touch $TEMP_PATH/ss_pk_pk_ct/"$USER_C"_pk.csv
touch $TEMP_PATH/ss_pk_pk_ct/$USER_B.csv
touch $TEMP_PATH/ss_pk_pk_ct/$USER_A.csv

touch $SRC_PATH/002_uac_ssw_pk_ctr2.xml

#				Заполнение инжекционных файлов

echo "filling injection files" >> $LOG_PATH/log.txt
echo "filling injection files"

echo "SEQUENTIAL;" >> $TEMP_PATH/ss_pk_pk_ct/"$USER_E"_pk.csv
echo "$USER_E;$DOM_E;$PK_CODE;" >> $TEMP_PATH/ss_pk_pk_ct/"$USER_E"_pk.csv

echo "SEQUENTIAL;" >> $TEMP_PATH/ss_pk_pk_ct/$USER_D.csv
echo "$USER_D;$DOM_D;" >> $TEMP_PATH/ss_pk_pk_ct/$USER_D.csv

echo "SEQUENTIAL;" >> $TEMP_PATH/ss_pk_pk_ct/"$USER_C"_ch.csv
echo "$USER_C;$DOM_C;*$HOLD_CODE#;;#$HOLD_CODE#;" >> $TEMP_PATH/ss_pk_pk_ct/"$USER_C"_ch.csv

echo "SEQUENTIAL;" >> $TEMP_PATH/ss_pk_pk_ct/"$USER_C"_ct.csv
echo "$USER_C;$DOM_C;*$CTR_CODE#;;#$CTR_CODE#;" >> $TEMP_PATH/ss_pk_pk_ct/"$USER_C"_ct.csv

echo "SEQUENTIAL;" >> $TEMP_PATH/ss_pk_pk_ct/"$USER_C"_pk.csv
echo "$USER_C;$DOM_C;$PK_CODE;" >> $TEMP_PATH/ss_pk_pk_ct/"$USER_C"_pk.csv

echo "SEQUENTIAL;" >> $TEMP_PATH/ss_pk_pk_ct/$USER_B.csv
echo "$USER_B;$DOM_B;" >> $TEMP_PATH/ss_pk_pk_ct/$USER_B.csv

echo "SEQUENTIAL;" >> $TEMP_PATH/ss_pk_pk_ct/$USER_A.csv
echo "$USER_A;$DOM_A;$USER_B;" >> $TEMP_PATH/ss_pk_pk_ct/$USER_A.csv

#				Формирование sipp сценария 002_uac_ssw_pk_ctr2.xml

echo "filling 002_uac_ssw_pk_ctr2.xml scenario" >> $LOG_PATH/log.txt
echo "filling 002_uac_ssw_pk_ctr2.xml scenario"

cat $SRC_PATH/for_sipp_sc/part1.txt >> $SRC_PATH/002_uac_ssw_pk_ctr2.xml
echo "<exec play_pcap_audio=\"$AUDIO_PATH/$USER_D.pcap\"/>" >> $SRC_PATH/002_uac_ssw_pk_ctr2.xml
cat $SRC_PATH/for_sipp_sc/part2.txt >> $SRC_PATH/002_uac_ssw_pk_ctr2.xml
echo "<exec play_pcap_audio=\"$AUDIO_PATH/dtmf4.pcap\"/>" >> $SRC_PATH/002_uac_ssw_pk_ctr2.xml
cat $SRC_PATH/for_sipp_sc/part3.txt >> $SRC_PATH/002_uac_ssw_pk_ctr2.xml

#				Запуск sipp сценариев
REZULT=0

T_NAME=Registrations
$SIPP_PATH/sipp $SSW_IP_PORT -sf $SRC_PATH/reg_auth.xml -inf $TEMP_PATH/ss_pk_pk_ct/$USER_A.csv -mi $SIPP_IP -s $USER_A -ap $USER_A -rtp_echo -l 1 -r 1 -m 1 -nd -i $SIPP_IP -p $PORT_A -timeout 10 -timeout_error
REZULT_A
$SIPP_PATH/sipp $SSW_IP_PORT -sf $SRC_PATH/reg_auth.xml -inf $TEMP_PATH/ss_pk_pk_ct/$USER_D.csv -mi $SIPP_IP -s $USER_D -ap $USER_D -rtp_echo -l 1 -r 1 -m 1 -nd -i $SIPP_IP -p $PORT_D -timeout 10 -timeout_error
REZULT_A
$SIPP_PATH/sipp $SSW_IP_PORT -sf $SRC_PATH/reg_auth.xml -inf $TEMP_PATH/ss_pk_pk_ct/$USER_B.csv -mi $SIPP_IP -s $USER_B -ap $USER_B -rtp_echo -l 1 -r 1 -m 1 -nd -i $SIPP_IP -p $PORT_B -timeout 10 -timeout_error
REZULT_A
$SIPP_PATH/sipp $SSW_IP_PORT -sf $SRC_PATH/reg_auth.xml -inf $TEMP_PATH/ss_pk_pk_ct/"$USER_E"_pk.csv -mi $SIPP_IP -s $USER_E -ap $USER_E -rtp_echo -l 1 -r 1 -m 1 -nd -i $SIPP_IP -p $PORT_E -timeout 10 -timeout_error
REZULT_A
$SIPP_PATH/sipp $SSW_IP_PORT -sf $SRC_PATH/reg_auth.xml -inf $TEMP_PATH/ss_pk_pk_ct/"$USER_C"_ch.csv -mi $SIPP_IP -s $USER_C -ap $USER_C -rtp_echo -l 1 -r 1 -m 1 -nd -i $SIPP_IP -p $PORT_C -timeout 10 -timeout_error
REZULT_A

T_NAME=Activate_CH
$SIPP_PATH/sipp $SSW_IP_PORT -sf $SRC_PATH/uac_f2_act_ss.xml -inf $TEMP_PATH/ss_pk_pk_ct/"$USER_C"_ch.csv -mi $SIPP_IP -s $USER_C -ap $USER_C -rtp_echo -l 1 -r 1 -m 1 -nd -i $SIPP_IP -p $PORT_C -timeout 10 -timeout_error
REZULT_A
T_NAME=Activate_CT
$SIPP_PATH/sipp $SSW_IP_PORT -sf $SRC_PATH/uac_f2_act_ss.xml -inf $TEMP_PATH/ss_pk_pk_ct/"$USER_C"_ct.csv -mi $SIPP_IP -s $USER_C -ap $USER_C -rtp_echo -l 1 -r 1 -m 1 -nd -i $SIPP_IP -p $PORT_C -timeout 10 -timeout_error
REZULT_A

# Run USER B and D scrfypt
T_NAME=Test
COMMAND="$SIPP_PATH/sipp $SSW_IP_PORT -sf $SRC_PATH/009_uas_ssw.xml -mi $SIPP_IP -m 1 -nd -i $SIPP_IP -p $PORT_B -timeout 300 -timeout_error; echo $COUNT $T_NAME \$? >> $TEMP_PATH/ex_code.txt"
COMMAND2="$SIPP_PATH/sipp $SSW_IP_PORT -sf $SRC_PATH/009_uas_ssw.xml -mi $SIPP_IP -m 1 -nd -i $SIPP_IP -p $PORT_D -timeout 300 -timeout_error; echo $COUNT $T_NAME \$? >> $TEMP_PATH/ex_code.txt"
# Call from A to B
COMMAND3="$SIPP_PATH/sipp $SSW_IP_PORT -sf $SRC_PATH/002_uac_ssw_pk_ctr.xml -inf $TEMP_PATH/ss_pk_pk_ct/$USER_A.csv -mi $SIPP_IP -s $USER_A -ap $USER_A -l 1 -r 1 -m 1 -nd -i $SIPP_IP -p $PORT_A -timeout 300 -timeout_error; echo $COUNT $T_NAME \$? >> $TEMP_PATH/ex_code.txt"
# User C  pickup, hold, new call and transfer
COMMAND_A="sudo $SIPP_PATH/sipp $SSW_IP_PORT -sf $SRC_PATH/002_uac_ssw_pk_ctr2.xml -inf $TEMP_PATH/ss_pk_pk_ct/"$USER_C"_pk.csv -mi $SIPP_IP -s $USER_C -ap $USER_C -l 1 -r 1 -m 1 -nd -i $SIPP_IP -p $PORT_C -sleep 10 -timeout 300 -timeout_error"
# User E pickup
COMMAND4="$SIPP_PATH/sipp $SSW_IP_PORT -sf $SRC_PATH/001_uac_ssw_pk_ctr.xml -inf $TEMP_PATH/ss_pk_pk_ct/"$USER_E"_pk.csv -mi $SIPP_IP -s $USER_E -ap $USER_E -l 1 -r 1 -m 1 -nd -i $SIPP_IP -p $PORT_E -sleep 45 -timeout 600 -timeout_error; echo $COUNT $T_NAME \$? >> $TEMP_PATH/ex_code.txt"
FUNC_TEST_PK

T_NAME=Dectivate SS
$SIPP_PATH/sipp $SSW_IP_PORT -sf $SRC_PATH/uac_f4_deact_ss.xml -inf $TEMP_PATH/ss_pk_pk_ct/"$USER_C"_ch.csv -mi $SIPP_IP -s $USER_C -ap $USER_C -rtp_echo -l 1 -r 1 -m 1 -nd -i $SIPP_IP -p $PORT_C -timeout 10 -timeout_error
REZULT_A
$SIPP_PATH/sipp $SSW_IP_PORT -sf $SRC_PATH/uac_f4_deact_ss.xml -inf $TEMP_PATH/ss_pk_pk_ct/"$USER_C"_ct.csv -mi $SIPP_IP -s $USER_C -ap $USER_C -rtp_echo -l 1 -r 1 -m 1 -nd -i $SIPP_IP -p $PORT_C -timeout 10 -timeout_error
REZULT_A

FINISH

